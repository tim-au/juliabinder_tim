precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(Base.stat), RelocatableFolders.Path})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Base.var"#326#327"{String}, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Dict{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Unitful.var"#@u_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.vect), Module})
precompile(Tuple{typeof(Base.iterate), Array{Module, 1}})
precompile(Tuple{typeof(Unitful.lookup_units), Array{Module, 1}, Expr})
precompile(Tuple{typeof(Core.Compiler.abstract_call_builtin), Core.Compiler.NativeInterpreter, typeof(getfield), Nothing, Array{Any, 1}, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Unitful.lookup_units), Array{Module, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#9#11"{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, Unitful.var"#9#11"{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#9#11"{Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Any, 1}, Unitful.var"#9#11"{Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(Unitful.preferunits), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Unitful.FreeUnits{(Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.getproperty), Unitful.Dimension{:Length}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.getproperty), Unitful.Dimension{:Time}, Symbol})
precompile(Tuple{Unitful.var"#2#5", Base.Pair{Symbol, Unitful.FreeUnits{N, D, A} where A where D where N}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Mole, Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Mole, Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(//)), Int64, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(*)), Base.Rational{Int64}, Base.Rational{Int64}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Mole, Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Unitful.var"#13#15"}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Unitful.var"#14#16"}}, Int64})
precompile(Tuple{Unitful.var"##s48#12", Any, Any, Any})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Amount}}})
precompile(Tuple{Type{Unitful.Dimension{:Amount}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Mole, Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Amount}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}}})
precompile(Tuple{Type{Unitful.Dimension{:Length}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Candela, Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Candela, Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Candela, Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Luminosity}}})
precompile(Tuple{Type{Unitful.Dimension{:Luminosity}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Candela, Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Luminosity}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Mass}}})
precompile(Tuple{Type{Unitful.Dimension{:Mass}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Gram, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Current}}})
precompile(Tuple{Type{Unitful.Dimension{:Current}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Ampere, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Current}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Temperature}}})
precompile(Tuple{Type{Unitful.Dimension{:Temperature}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Kelvin, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Temperature}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#3#6", Tuple{Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Unitful.var"#3#6", Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Unitful.dimension), Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Time}}})
precompile(Tuple{Type{Unitful.Dimension{:Time}}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Unitful.Dimensions{N} where N, Unitful.Unit{U, D} where D where U}, Unitful.Unit{:Second, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Dimensions{(Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=1, den=1)),)}})
precompile(Tuple{Markdown.var"#@md_str", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Markdown.mdexpr), String})
precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{1}})
precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{Type{Markdown.Header{2}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{2}})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{Type{Base.LinRange{T} where T}, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.LinRange{Float64}}}})
precompile(Tuple{LaTeXStrings.var"#@L_str", LineNumberNode, Module, String})
precompile(Tuple{Type{NamedTuple{(:maxsize,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:maxsize,), Tuple{Int64}}, Type{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.getindex), String, Int64})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Float64}})
precompile(Tuple{Type{NamedTuple{(:title, :xlabel, :ylabel, :xlim, :ylim, :legend), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Float64, 1}, Array{Int64, 1}, Bool}})
precompile(Tuple{typeof(Base.supertype), DataType})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.supertype), UnionAll})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{var"#s58"} where var"#s58"<:(ColorTypes.Colorant{T, N} where N where T), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{C}, Type} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Any})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:title, :xlabel, :ylabel, :xlim, :ylim, :legend), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Float64, 1}, Array{Int64, 1}, Bool}}, typeof(RecipesBase.plot), Base.LinRange{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.append!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.is_subplot_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.reset_kw!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, AbstractArray{var"#s30", N} where N where var"#s30"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Any})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.LinRange{Float64}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Float64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#21#22", Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Base.LinRange{Float64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.LinRange{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.LinRange{Float64}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.LinRange{Float64}, Symbol})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Plots.var"##GridLayout#162", Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64, Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(!=)), String, String})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(RecipesPipeline.pop_kw!), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{Type{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}}, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.slice_arg), LaTeXStrings.LaTeXString, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims, :guide), T} where T<:Tuple}, Tuple{Array{Float64, 1}, LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lims, :guide), Tuple{Array{Float64, 1}, LaTeXStrings.LaTeXString}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:lims, :guide), Tuple{Array{Float64, 1}, LaTeXStrings.LaTeXString}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.slice_arg), Array{Int64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims, :guide), T} where T<:Tuple}, Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lims, :guide), Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:lims, :guide), Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_legend), Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Generator{Base.Iterators.Filter{Plots.var"#111#114"{Base.Dict{Symbol, Any}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Plots.var"#110#113"{Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Plots.var"#112#115"{Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.getproperty), Plots.Font, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#42#43", Type, Type, Type, Type, Type})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.font)})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.process_sliced_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{Base.var"#97#98"{Plots.var"#153#154"}, Base.Iterators.Pairs{Int64, Base.Dict{Symbol, Any}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Base.Dict{Symbol, Any}, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(RecipesPipeline.series_defaults), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.LinRange{Float64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Symbol, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.GRBackend}, Function})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{Base.Broadcast.var"#@__dot__", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.LinRange{Float64}, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Int64, Base.LinRange{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, Base.LinRange{Float64}}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, Base.LinRange{Float64}}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.LinRange{Float64}, Base.RefValue{Base.Val{2}}}}, Base.LinRange{Float64}}}, Int64}}})
precompile(Tuple{typeof(Base.:(*)), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.print_to_string), LaTeXStrings.LaTeXString, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LaTeXStrings.LaTeXString})
precompile(Tuple{Type{NamedTuple{(:title, :xlabel, :ylabel, :color, :legend), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString, String, String, String, Bool}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:title, :xlabel, :ylabel, :color, :legend), Tuple{LaTeXStrings.LaTeXString, String, String, String, Bool}}, typeof(RecipesBase.plot), Base.LinRange{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.slice_arg), String, Int64})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:guide,), Tuple{String}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:guide,), Tuple{String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.get_series_color), String, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:alpha, :color, :marker_z, :marker, :markersize, :legend), T} where T<:Tuple}, Tuple{Float64, Symbol, Array{Float64, 1}, Symbol, Int64, Bool}})
precompile(Tuple{Plots.var"#scatter##kw", Any, typeof(Plots.scatter), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:alpha, :color, :marker_z, :marker, :markersize, :legend), Tuple{Float64, Symbol, Array{Float64, 1}, Symbol, Int64, Bool}}})
precompile(Tuple{Plots.var"##scatter#415", Any, typeof(Plots.scatter), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:alpha, :color, :marker_z, :marker, :markersize, :legend), Tuple{Float64, Symbol, Array{Float64, 1}, Symbol, Int64, Bool}}}})
precompile(Tuple{Base.var"##s77#169", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol, N} where N}, Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s76"} where var"#s76"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:alpha, :color, :marker_z, :marker, :markersize, :legend), Tuple{Float64, Symbol, Array{Float64, 1}, Symbol, Int64, Bool}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:alpha, :color, :marker_z, :marker, :markersize, :legend, :seriestype), Tuple{Float64, Symbol, Array{Float64, 1}, Symbol, Int64, Bool, Symbol}}, typeof(RecipesBase.plot), Base.LinRange{Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.wraptuple), Symbol})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{Type{ErrorException}, String})
precompile(Tuple{PlotUtils.var"##cgrad#18", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{PlotUtils.var"##cgrad#16", Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(PlotUtils.prepare_continuous_cgrad_colors), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ContinuousColorGradient, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), PlotUtils.ContinuousColorGradient})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Plots.update_clims), Float64, Float64, Array{Float64, 1}, typeof(Plots.ignorenan_extrema)})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Unitful.var"#34#37"}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Unitful.var"#35#38"}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Unitful.var"#36#39"}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Unitful.Dimensions{()}}}, Int64})
precompile(Tuple{Unitful.var"##s48#33", Any, Any, Any})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{Type{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Tuple{Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.:(^)), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Dimension{D} where D, 1}, Tuple{Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Unitful.var"#14#16", Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Unitful.var"#14#16", Base.Order.ForwardOrdering}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Time}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Unitful.var"#14#16", Base.Order.ForwardOrdering}, Unitful.Dimension{:Mass}, Unitful.Dimension{:Length}})
precompile(Tuple{Unitful.var"##s48#101", Any, Any, Any})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}, Int64, Base.Rational{Int64}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Tuple{Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Int64, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(*)), Float64, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.vect), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Vararg{Any, N} where N})
precompile(Tuple{Unitful.var"##s48#98", Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Unitful.var"#99#100", Tuple{Unitful.Dimension{:Length}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}}, Unitful.var"#99#100"}})
precompile(Tuple{typeof(Base.:(^)), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}, Base.Rational{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Unitful.Dimension{:Length}}, Unitful.var"#99#100"}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Unitful.Unit{U, D} where D where U, 1}, Tuple{}})
precompile(Tuple{Unitful.var"##s81#159", Any, Any, Any})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Float64, Base.Rational{Int64}, Int64, Int64, Base.Rational{Int64}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#90#94", typeof(Base.:(*)), Float64, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#91#95", typeof(Base.:(*)), Float64, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#92#96", typeof(Base.:(*)), Float64, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Base.:(&)), Bool, Bool})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#93#97", typeof(Base.:(*)), Int64, Tuple{Tuple{Float64, Int64}}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Base.:(//)), Int64, Int64})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.:(^)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.numerator), Base.Rational{Int64}})
precompile(Tuple{typeof(Base.:(^)), Base.Rational{Int64}, Int64})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Unitful.basefactor), Unitful.FreeUnits{(Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Float64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#90#94", typeof(Base.:(*)), Float64, Tuple{Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#91#95", typeof(Base.:(*)), Float64, Tuple{Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#92#96", typeof(Base.:(*)), Float64, Tuple{Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Unitful.var"#93#97", typeof(Base.:(*)), Int64, Tuple{Tuple{Float64, Base.Rational{Int64}}}})
precompile(Tuple{typeof(Base.:(//)), Base.Rational{Int64}, Int64})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.tensfactor), typeof(Base.:(+)), Int64, Tuple{Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}}})
precompile(Tuple{Type{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Tuple{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Inch, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-2, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(|>)), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Base.RefValue{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(|>)), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Base.RefValue{Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}}}})
precompile(Tuple{typeof(Base.:(+)), UInt64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Int64}, UInt64})
precompile(Tuple{typeof(Unitful.ustrip), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{typeof(Unitful.ustrip), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}})
precompile(Tuple{Type{NamedTuple{(:title, :xlabel, :ylabel, :legend), T} where T<:Tuple}, Tuple{String, String, String, Bool}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:title, :xlabel, :ylabel, :legend), Tuple{String, String, String, Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :xlabel, :ylabel, :legend), Tuple{String, String, String, Bool}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:title, :xlabel, :ylabel, :legend), Tuple{String, String, String, Bool}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:title, :xlabel, :ylabel, :legend, :seriestype), Tuple{String, String, String, Bool, Symbol}}, typeof(RecipesBase.plot), Base.ReinterpretArray{Float64, 1, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, false}, Base.ReinterpretArray{Int64, 1, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, false}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Base.ReinterpretArray{Float64, 1, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, false}, Base.ReinterpretArray{Int64, 1, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, false}}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.ReinterpretArray{Float64, 1, Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, false}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.ReinterpretArray{Int64, 1, Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, false}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{Type{NamedTuple{(:r, :F), T} where T<:Tuple}, Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:r, :F), Tuple{Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.var"##make_unique!#1", Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"#DataFrame#152#154", Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.length), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{typeof(Base.length), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Unitful.Quantity{Float64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}})
precompile(Tuple{typeof(Markdown.asterisk_bold), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Unitful.var"#36#39", Base.Order.ForwardOrdering}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}, Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}})
precompile(Tuple{Base.var"#mapreduce##kw", NamedTuple{(:init,), Tuple{Unitful.Dimensions{()}}}, typeof(Base.mapreduce), Function, Function, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Unitful.dimension), typeof(Base.:(*)), Unitful.Dimensions{()}, Tuple{Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}, Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Unitful.var"#14#16", Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Length}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Unitful.var"#14#16", Base.Order.ForwardOrdering}, Unitful.Dimension{:Length}, Unitful.Dimension{:Mass}})
precompile(Tuple{typeof(LinearAlgebra.cross), Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), Unitful.FreeUnits{(Unitful.Unit{:Meter, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}()}(tens=-3, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)),)}(), nothing}}, 1}, Array{Unitful.Quantity{Int64, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), Unitful.FreeUnits{(Unitful.Unit{:Newton, Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}()}(tens=0, power=Base.Rational{Int64}(num=1, den=1)),), Unitful.Dimensions{(Unitful.Dimension{:Length}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Mass}(power=Base.Rational{Int64}(num=1, den=1)), Unitful.Dimension{:Time}(power=Base.Rational{Int64}(num=-2, den=1)))}(), nothing}}, 1}})

